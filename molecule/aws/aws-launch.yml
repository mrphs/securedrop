---
- name: Create remote CI hosts on AWS.
  ec2:
    group_id: "{{ group_create_result.group_id }}"
    vpc_subnet_id: "{{ vpc_subnet_result.subnets[0].id }}"
    assign_public_ip: yes
    image: "{{ ami_search_result.results[0].ami_id }}"
    region: "{{ aws_ec2_ci_region }}"
    key_name: "sdci-{{ job_id }}"
    exact_count: 1
    instance_type: "{{ aws_ec2_instance_type }}"
    instance_initiated_shutdown_behavior: terminate
    wait: True
    user_data: "{{ aws_ec2_ci_userdata }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 15
        delete_on_termination: True
    instance_tags: "{{ aws_ec2_ci_tags | combine(item) }}"
    count_tag: "{{ aws_ec2_ci_tags | combine(item) }}"
    instance_profile_name: securedrop
  register: reg_ec_instance
  with_items: "{{ molecule_yml.platforms }}"

- block:
    - name: Wait for EC2 instances to boot.
      wait_for:
        host: "{{ item.tagged_instances[0]['public_dns_name'] }}"
        port: 22
        timeout: 20
        state: started
      register: ec2_launch_results
      with_items: "{{ reg_ec_instance.results }}"
      when: "item.tagged_instances[0].tags['build_num'] == aws_ec2_ci_tags.build_num"
  rescue:
    - name: Destroy EC2 instances (for relaunch)
      ec2:
        region: "{{ aws_ec2_ci_region }}"
        instance_ids: ["{{ item.item.tagged_instances[0].id }}"]
        state: absent
      notify: aws relaunch
      when: item|failed
      with_items: "{{ ec2_launch_results.results }}"

    - name: Flush handlers to re-run AWS logic
      meta: flush_handlers
